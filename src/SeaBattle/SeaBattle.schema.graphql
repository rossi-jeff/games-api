type SeaBattle {
	Id: Int!
	Axis: Int
	CreatedAt: Date
	UpdatedAt: Date

	User: User
	Ships: [SeaBattleShip]
	Turns: [SeaBattleTurn]
}

type SeaBattleShip {
	Id: Int!
	Type: ShipType
	Navy: Navy
	Size: Int
	Sunk: Boolean

	GridPoints: [GridPoint]
}

type SeaBattleTurn {
	Id: Int!
	Navy: Navy
	Target: Target
	ShipType: ShipType

	GridPoint: GridPoint
}

type GridPoint {
	Horizontal: String
	Vertical: Int
}

enum ShipType {
	Carrier
	BattleShip
	Cruiser
	SubMarine
	PatrolBoat
}

enum Navy {
	Player
	Opponent
}

enum Target {
	Miss
	Hit
	Sunk
}

input ShipInput {
	Navy: Navy!
	Type: ShipType!
	GridPoints: [GridPoint]
}

input SeaBattleTurnInput {
	Navy: Navy!
	GridPoint: GridPoint
}

type Query {
	seaBattles: [SeaBattle]
	seaBattle(Id: Int!): SeaBattle
}

type Mutation {
	seaBattleCreate(Axis: Int!, UserId: Int): SeaBattle
	seaBattleShip(Id: Int!, ship: ShipInput!): SeaBattleShip
	seaBattleShipMove(Id: Int!, GridPoints: [GridPoint!]!): SeaBattleShip
	seaBattleTurn(Id: Int!, turn: SeaBattleTurnInput!): SeaBattleTurn
}
