// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/games-db"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CodeBreaker {
  Id        Int        @id @default(autoincrement())
  UserId    Int?
  Status    GameStatus
  Columns   Int
  CreatedAt DateTime   @default(now())
  UpdatedAt DateTime   @updatedAt

  Code    CodeBreakerCode[]
  Guesses CodeBreakerGuess[]
}

model CodeBreakerCode {
  Id            Int      @id @default(autoincrement())
  CodeBreakerId Int
  Color         Color
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt

  CodeBreaker CodeBreaker @relation(fields: [CodeBreakerId], references: [Id])
}

model CodeBreakerGuess {
  Id            Int      @id @default(autoincrement())
  CodeBreakerId Int
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt

  CodeBreaker CodeBreaker             @relation(fields: [CodeBreakerId], references: [Id])
  Colors      CodeBreakerGuessColor[]
  Keys        CodeBreakerGuessKey[]
}

model CodeBreakerGuessColor {
  Id                 Int      @id @default(autoincrement())
  CodeBreakerGuessId Int
  Color              Color
  CreatedAt          DateTime @default(now())
  UpdatedAt          DateTime @updatedAt

  CodeBreakerGuess CodeBreakerGuess @relation(fields: [CodeBreakerGuessId], references: [Id])
}

model CodeBreakerGuessKey {
  Id                 Int      @id @default(autoincrement())
  CodeBreakerGuessId Int
  Key                Key
  CreatedAt          DateTime @default(now())
  UpdatedAt          DateTime @updatedAt

  CodeBreakerGuess CodeBreakerGuess @relation(fields: [CodeBreakerGuessId], references: [Id])
}

enum Color {
  Red
  Orange
  Yellow
  Green
  Blue
  Purple
  Brown
  Black
  White
}

enum Key {
  Black
  White
}

enum GameStatus {
  Playing
  Won
  Lost
}

model GuessWord {
  Id        Int        @id @default(autoincrement())
  WordId    Int
  UserId    Int?
  Status    GameStatus
  CreatedAt DateTime   @default(now())
  UpdatedAt DateTime   @updatedAt

  User    User?            @relation(fields: [UserId], references: [Id])
  Word    Word             @relation(fields: [WordId], references: [Id])
  Guesses GuessWordGuess[]
}

model GuessWordGuess {
  Id          Int      @id @default(autoincrement())
  GuessWordId Int
  Guess       String   @db.VarChar(25)
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  GuessWord GuessWord              @relation(fields: [GuessWordId], references: [Id])
  Ratings   GuessWordGuessRating[]
}

model GuessWordGuessRating {
  Id               Int      @id @default(autoincrement())
  GuessWordGuessId Int
  Rating           Rating
  CreatedAt        DateTime @default(now())
  UpdatedAt        DateTime @updatedAt

  GuessWordGuess GuessWordGuess @relation(fields: [GuessWordGuessId], references: [Id])
}

model HangMan {
  Id        Int        @id @default(autoincrement())
  WordId    Int
  UserId    Int?
  Correct   String
  Wrong     String
  Status    GameStatus
  CreatedAt DateTime   @default(now())
  UpdatedAt DateTime   @updatedAt

  User User? @relation(fields: [UserId], references: [Id])
  Word Word  @relation(fields: [WordId], references: [Id])
}

enum Rating {
  Green
  Brown
  Gray
}

model SeaBattle {
  Id        Int        @id @default(autoincrement())
  UserId    Int?
  Axis      Int
  Status    GameStatus
  CreatedAt DateTime   @default(now())
  UpdatedAt DateTime   @updatedAt

  User  User?           @relation(fields: [UserId], references: [Id])
  Ships SeaBattleShip[]
  Turns SeaBattleTurn[]
}

model SeaBattleShip {
  Id          Int       @id @default(autoincrement())
  SeaBattleId Int
  Type        ShipType?
  Navy        Navy?
  Size        Int?
  Sunk        Boolean?  @default(false)
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt

  SeaBattle  SeaBattle                @relation(fields: [SeaBattleId], references: [Id])
  GridPoints SeaBattleShipGridPoint[]
  Hits       SeaBattleShipHit[]
}

model SeaBattleTurn {
  Id          Int       @id @default(autoincrement())
  SeaBattleId Int
  Navy        Navy?
  Target      Target?
  ShipType    ShipType?
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt

  SeaBattle SeaBattle                @relation(fields: [SeaBattleId], references: [Id])
  GridPoint SeaBattleTurnGridPoint[]
}

model SeaBattleShipGridPoint {
  Id              Int      @id @default(autoincrement())
  SeaBattleShipId Int
  Horizontal      String?  @db.Char(1)
  Vertical        Int?
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt

  SeaBattleShip SeaBattleShip @relation(fields: [SeaBattleShipId], references: [Id])
}

model SeaBattleTurnGridPoint {
  Id              Int      @id @default(autoincrement())
  SeaBattleTurnId Int
  Horizontal      String?  @db.Char(1)
  Vertical        Int?
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt

  SeaBattleTurn SeaBattleTurn @relation(fields: [SeaBattleTurnId], references: [Id])
}

model SeaBattleShipHit {
  Id              Int      @id @default(autoincrement())
  SeaBattleShipId Int
  Horizontal      String?  @db.Char(1)
  Vertical        Int?
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt

  SeaBattleShip SeaBattleShip @relation(fields: [SeaBattleShipId], references: [Id])
}

enum ShipType {
  Carrier
  BattleShip
  Cruiser
  SubMarine
  PatrolBoat
}

enum Navy {
  Player
  Opponent
}

enum Target {
  Miss
  Hit
  Sunk
}

model User {
  Id             Int      @id @default(autoincrement())
  UserName       String   @db.VarChar(100)
  HashedPassWord String   @db.VarChar(255)
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  HangMen    HangMan[]
  GuessWords GuessWord[]
  SeaBattles SeaBattle[]
}

model Word {
  Id        Int      @id @default(autoincrement())
  Word      String   @db.VarChar(25)
  Length    Int
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  HangMen    HangMan[]
  GuessWords GuessWord[]
}
